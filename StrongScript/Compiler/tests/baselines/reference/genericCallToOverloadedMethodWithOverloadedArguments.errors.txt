tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts(24,38): error TS2345: Argument of type '{ (n: number): Promise<number>; (s: string): Promise<string>; }' is not assignable to parameter of type '(x: number) => Promise<string>'.
tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts(53,38): error TS2345: Argument of type '{ (n: number): Promise<number>; (s: string): Promise<string>; }' is not assignable to parameter of type '(x: number) => Promise<string>'.
tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts(69,38): error TS2345: Argument of type '{ (n: number): Promise<number>; (s: string): Promise<string>; }' is not assignable to parameter of type '(x: number) => Promise<string>'.
tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts(85,38): error TS2345: Argument of type '{ (n: number): Promise<number>; (s: string): Promise<string>; (b: boolean): Promise<boolean>; }' is not assignable to parameter of type '(x: number) => Promise<boolean>'.


==== tests/cases/conformance/types/typeRelationships/typeInference/genericCallToOverloadedMethodWithOverloadedArguments.ts (4 errors) ====
    
    module m1 {
        interface Promise<T> {
            then<U>(cb: (x: T) => Promise<U>): Promise<U>;
        }
    
        declare function testFunction(n: number): Promise<number>;
    
        var numPromise: Promise<number>;
        var newPromise = numPromise.then(testFunction);
    }
    
    //////////////////////////////////////
    
    module m2 {
        interface Promise<T> {
            then<U>(cb: (x: T) => Promise<U>): Promise<U>;
        }
    
        declare function testFunction(n: number): Promise<number>;
        declare function testFunction(s: string): Promise<string>;
    
        var numPromise: Promise<number>;
        var newPromise = numPromise.then(testFunction);
                                         ~~~~~~~~~~~~
!!! error TS2345: Argument of type '{ (n: number): Promise<number>; (s: string): Promise<string>; }' is not assignable to parameter of type '(x: number) => Promise<string>'.
    }
    
    //////////////////////////////////////
    
    module m3 {
        interface Promise<T> {
            then<U>(cb: (x: T) => Promise<U>): Promise<U>;
            then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
        }
    
        declare function testFunction(n: number): Promise<number>;
    
        var numPromise: Promise<number>;
        var newPromise = numPromise.then(testFunction);
    }
    
    //////////////////////////////////////
    
    module m4 {
        interface Promise<T> {
            then<U>(cb: (x: T) => Promise<U>): Promise<U>;
            then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
        }
    
        declare function testFunction(n: number): Promise<number>;
        declare function testFunction(s: string): Promise<string>;
    
        var numPromise: Promise<number>;
        var newPromise = numPromise.then(testFunction);
                                         ~~~~~~~~~~~~
!!! error TS2345: Argument of type '{ (n: number): Promise<number>; (s: string): Promise<string>; }' is not assignable to parameter of type '(x: number) => Promise<string>'.
    }
    
    //////////////////////////////////////
    
    module m5 {
        interface Promise<T> {
            then<U>(cb: (x: T) => Promise<U>): Promise<U>;
            then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
            then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => U, progress?: (preservation: any) => void): Promise<U>;
        }
    
        declare function testFunction(n: number): Promise<number>;
        declare function testFunction(s: string): Promise<string>;
    
        var numPromise: Promise<number>;
        var newPromise = numPromise.then(testFunction);
                                         ~~~~~~~~~~~~
!!! error TS2345: Argument of type '{ (n: number): Promise<number>; (s: string): Promise<string>; }' is not assignable to parameter of type '(x: number) => Promise<string>'.
    }
    
    //////////////////////////////////////
    
    module m6 {
        interface Promise<T> {
            then<U>(cb: (x: T) => Promise<U>): Promise<U>;
            then<U>(cb: (x: T) => Promise<U>, error?: (error: any) => Promise<U>): Promise<U>;
        }
    
        declare function testFunction(n: number): Promise<number>;
        declare function testFunction(s: string): Promise<string>;
        declare function testFunction(b: boolean): Promise<boolean>;
    
        var numPromise: Promise<number>;
        var newPromise = numPromise.then(testFunction);
                                         ~~~~~~~~~~~~
!!! error TS2345: Argument of type '{ (n: number): Promise<number>; (s: string): Promise<string>; (b: boolean): Promise<boolean>; }' is not assignable to parameter of type '(x: number) => Promise<boolean>'.
    }
    