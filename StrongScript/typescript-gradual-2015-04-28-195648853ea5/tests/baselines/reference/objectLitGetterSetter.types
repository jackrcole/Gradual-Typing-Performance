=== tests/cases/compiler/objectLitGetterSetter.ts ===
            var obj = {};
>obj : {}
>{} : {}

            Object.defineProperty(obj, "accProperty", <PropertyDescriptor>({
>Object.defineProperty(obj, "accProperty", <PropertyDescriptor>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            })) : any
>Object.defineProperty : (o: any, p: string, attributes: PropertyDescriptor) => any
>Object : ObjectConstructor
>defineProperty : (o: any, p: string, attributes: PropertyDescriptor) => any
>obj : {}
><PropertyDescriptor>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            }) : PropertyDescriptor
>PropertyDescriptor : PropertyDescriptor
>({                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            }) : { get: () => number; set: (v: any) => void; }
>{                get: function () {                    eval("public = 1;");                    return 11;                },                set: function (v) {                }            } : { get: () => number; set: (v: any) => void; }

                get: function () {
>get : () => number
>function () {                    eval("public = 1;");                    return 11;                } : () => number

                    eval("public = 1;");
>eval("public = 1;") : any
>eval : (x: string) => any

                    return 11;
                },
                set: function (v) {
>set : (v: any) => void
>function (v) {                } : (v: any) => void
>v : any
                }
            }))

